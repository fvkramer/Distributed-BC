Integer DNA with different digit sequences mapping to different points

# Contracts

Solidity code encapsulated in Contracts

shell for contract

contract HelloWorld {

}


----------

Solidity has compiler. All source code should start with version pragma to prevent issues 
with future compilers

"version pragma"

pragma solidity ^0.4.25;

_____

Variables

State Variables permanently stored in contract storage.
Written into Ethereum Blockchain
Similar to writing to DB


Unsigned vs Signed Integer

Unsigned - uses left most bit as integer. Larger positive value
Signed Int. - left most bit is sign. 


** In Soliditiy, uint is alias for uint256, a 256-bit unsigned integer.

ex: 

uint name = 16;
uint8 eight = 8;

** To make integer certain amount of digits...
    int % (10 ^ num_digits)

---------

# Struct

more complext datatype with multiple properties

struct Person {
  uint age;
  string name;
}

*******
Two types of Arrays in Solidity

Fixed and Dynamic

// Array with a fixed length of 2 elements:

uint[2] fixedArray;

// another fixed Array, can contain 5 strings:

string[5] stringArray;

// a dynamic Array - has no fixed size, can keep growing:

uint[] dynamicArray;

Can also create arrays of Structs

Person[] people;   - array of Person struct named people

Person[] public people;  -- creates a public array with a getter method
other contracts can read from it

# Functions

function parameters start with _ to differentiate from globals


function(string _name, uint _dna) {
  zombies.push()
}

people.push(Person(16, "Vitalik"));

^ pushes into array an instance of new Person struct


--------

By default, functions are public
Therefore, anyone or any other contract can call your contract's functions


Private Functions

function _addToArray(uint _number) private {
  numbers.push(_number)
}

private functions start with underscore

# Cont.

string greeting = "What's up dog";

function sayHello() public returns (string) {
  return greeting;
}

function declaration contains return type

View Function - views data in app but does not modify
Pure Function - does not even access data in app

sayHello is a view function

function sayHello() public view returns (string) {}

function _multiply(uint a, uint b) private pure returns (uint) {
  return a * b;
}

Above function return value only depends on passed parameters


 function _generateRandomDna(string _str) private view returns (uint) {
        // start here
    }

Ethereum has built in hash function 
- keccak256 -takes byte as first argument
- keccak256(abi.encodePacked("aaab"));


# Typecasting

uint8 a = 5;
uint b = 6;
// throws an error because a * b returns a uint, not uint8:
uint8 c = a * b; 
// we have to typecast b as a uint8 to make it work:
uint8 c = a * uint8(b);

#Events

way to communicate something occuring on blockchain to app
app listens to evens and responds


/declare event
event IntegersAdded(uint x, uint y, uint result);

function add(uint _x, uint _y) public {
  uint result = _x + _y;
  // fire an event to let the app know the function was called:
  emit IntegersAdded(_x, _y, result);
  return result;
}

array.push() returns uint of new length of array
array.push() - 1 returns index of recently added item